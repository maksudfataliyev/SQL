CREATE TABLE CURATORS (
    ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    NAME NVARCHAR(MAX) NOT NULL,
    SURNAME NVARCHAR(MAX) NOT NULL
);

CREATE TABLE DEPARTMENTS (
    ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    BUILDING INT NOT NULL CHECK (BUILDING BETWEEN 1 AND 5),
    FINANCING MONEY NOT NULL DEFAULT 0 CHECK (FINANCING >= 0),
    NAME NVARCHAR(100) NOT NULL UNIQUE,
    FACULTY_ID INT NOT NULL FOREIGN KEY REFERENCES FACULTIES(ID)
);

CREATE TABLE FACULTIES (
    ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    NAME NVARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE GROUPS (
    ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    NAME NVARCHAR(10) NOT NULL UNIQUE,
    YEAR INT NOT NULL CHECK (YEAR BETWEEN 1 AND 5),
    DEPARTMENT_ID INT NOT NULL FOREIGN KEY REFERENCES DEPARTMENTS(ID)
);

CREATE TABLE GROUPS_CURATORS (
    ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    CURATOR_ID INT NOT NULL FOREIGN KEY REFERENCES CURATORS(ID),
    GROUP_ID INT NOT NULL FOREIGN KEY REFERENCES GROUPS(ID)
);

CREATE TABLE GROUPS_LECTURES (
    ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    GROUP_ID INT NOT NULL FOREIGN KEY REFERENCES GROUPS(ID),
    LECTURE_ID INT NOT NULL FOREIGN KEY REFERENCES LECTURES(ID)
);

CREATE TABLE GROUPS_STUDENTS (
    ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    GROUP_ID INT NOT NULL FOREIGN KEY REFERENCES GROUPS(ID),
    STUDENT_ID INT NOT NULL FOREIGN KEY REFERENCES STUDENTS(ID)
);

CREATE TABLE LECTURES (
    ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    DATE DATE NOT NULL CHECK (DATE <= GETDATE()),
    SUBJECT_ID INT NOT NULL FOREIGN KEY REFERENCES SUBJECTS(ID),
    TEACHER_ID INT NOT NULL FOREIGN KEY REFERENCES TEACHERS(ID)
);

CREATE TABLE STUDENTS (
    ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    NAME NVARCHAR(MAX) NOT NULL,
    RATING INT NOT NULL CHECK (RATING BETWEEN 0 AND 5),
    SURNAME NVARCHAR(MAX) NOT NULL
);

CREATE TABLE SUBJECTS (
    ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    NAME NVARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE TEACHERS (
    ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
    IS_PROFESSOR BIT NOT NULL DEFAULT 0,
    NAME NVARCHAR(MAX) NOT NULL,
    SALARY MONEY NOT NULL CHECK (SALARY > 0),
    SURNAME NVARCHAR(MAX) NOT NULL
);





SELECT BUILDING
FROM DEPARTMENTS
GROUP BY BUILDING
HAVING SUM(FINANCING) > 100000;



SELECT G.NAME
FROM GROUPS G
JOIN DEPARTMENTS D ON G.DEPARTMENTID = D.ID
JOIN GROUPSLECTURES GL ON G.ID = GL.GROUPID
JOIN LECTURES L ON GL.LECTUREID = L.ID
JOIN SUBJECTS S ON L.SUBJECTID = S.ID
WHERE G.YEAR = 5 AND D.NAME = 'SOFTWARE DEVELOPMENT'
GROUP BY G.NAME
HAVING COUNT(*) > 10;



SELECT G.NAME
FROM GROUPS G
JOIN GROUPSSTUDENTS GS ON G.ID = GS.GROUPID
JOIN STUDENTS S ON GS.STUDENTID = S.ID
GROUP BY G.NAME
HAVING AVG(S.RATING) > (
    SELECT AVG(S.RATING)
    FROM GROUPS G
    JOIN GROUPSSTUDENTS GS ON G.ID = GS.GROUPID
    JOIN STUDENTS S ON GS.STUDENTID = S.ID
    WHERE G.NAME = 'D221'
);



SELECT SURNAME, NAME
FROM TEACHERS
WHERE SALARY > (
    SELECT AVG(SALARY)
    FROM TEACHERS
    WHERE ISPROFESSOR = 1
);



SELECT G.NAME
FROM GROUPS G
JOIN GROUPSCURATORS GC ON G.ID = GC.GROUPID
GROUP BY G.NAME
HAVING COUNT(GC.CURATORID) > 1;



SELECT G.NAME
FROM GROUPS G
JOIN GROUPSSTUDENTS GS ON G.ID = GS.GROUPID
JOIN STUDENTS S ON GS.STUDENTID = S.ID
GROUP BY G.NAME
HAVING AVG(S.RATING) < (
    SELECT MIN(GROUP_RATING)
    FROM (
        SELECT AVG(S.RATING) AS GROUP_RATING
        FROM GROUPS G
        JOIN GROUPSSTUDENTS GS ON G.ID = GS.GROUPID
        JOIN STUDENTS S ON GS.STUDENTID = S.ID
        WHERE G.YEAR = 5
        GROUP BY G.ID
    ) T
);



SELECT F.NAME
FROM FACULTIES F
JOIN DEPARTMENTS D ON F.ID = D.FACULTYID
GROUP BY F.NAME
HAVING SUM(D.FINANCING) > (
    SELECT SUM(FINANCING)
    FROM DEPARTMENTS
    WHERE FACULTYID = (
        SELECT ID FROM FACULTIES WHERE NAME = 'COMPUTER SCIENCE'
    )
);




SELECT S.NAME, T.SURNAME, T.NAME
FROM LECTURES L
JOIN SUBJECTS S ON L.SUBJECTID = S.ID
JOIN TEACHERS T ON L.TEACHERID = T.ID
GROUP BY S.NAME, T.SURNAME, T.NAME
HAVING COUNT(L.ID) = (
    SELECT MAX(LECTURE_COUNT)
    FROM (
        SELECT COUNT(L.ID) AS LECTURE_COUNT
        FROM LECTURES L
        GROUP BY L.SUBJECTID, L.TEACHERID
    ) T
);



SELECT S.NAME
FROM LECTURES L
JOIN SUBJECTS S ON L.SUBJECTID = S.ID
GROUP BY S.NAME
HAVING COUNT(L.ID) = (
    SELECT MIN(LECTURE_COUNT)
    FROM (
        SELECT COUNT(L.ID) AS LECTURE_COUNT
        FROM LECTURES L
        GROUP BY L.SUBJECTID
    ) T
);



SELECT COUNT(DISTINCT GS.STUDENTID) AS STUDENT_COUNT, COUNT(DISTINCT L.SUBJECTID) AS SUBJECT_COUNT
FROM GROUPS G
JOIN DEPARTMENTS D ON G.DEPARTMENTID = D.ID
JOIN GROUPSSTUDENTS GS ON G.ID = GS.GROUPID
JOIN GROUPSLECTURES GL ON G.ID = GL.GROUPID
JOIN LECTURES L ON GL.LECTUREID = L.ID
WHERE D.NAME = 'SOFTWARE DEVELOPMENT';
